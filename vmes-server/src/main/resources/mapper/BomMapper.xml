<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
说明：操作日志 Mapper.xml
创建人：刘威 自动创建
创建时间：2018-09-29
 -->
<mapper namespace="com.xy.vmes.deecoop.base.dao.BomMapper">

    <!--表名 自动创建，禁止修改-->
    <sql id="tableName">
	vmes_bom
    </sql>

    <!-- 字段 自动创建，禁止修改-->
    <sql id="Field">
		company_id companyId,<!-- 公司ID-组织架构 -->
		code code,<!-- bom编码 -->
		name name,<!-- bom名称 -->
		isdefault isdefault,<!-- 是否默认(0:非默认 1:默认) -->
		cuser cuser,<!-- 创建用户id -->
		cdate cdate,<!-- 创建时间 -->
		uuser uuser,<!-- 修改用户id -->
		udate udate,<!-- 修改时间 -->
		isdisable isdisable,<!-- 是否启用(0:已禁用 1:启用) -->
		remark remark,<!-- 备注 -->
		id id <!-- id -->
    </sql>

    <!-- 字段值 自动创建，禁止修改-->
    <sql id="FieldValue">
		#{companyId},<!-- 公司ID-组织架构 -->
		#{code},<!-- bom编码 -->
		#{name},<!-- bom名称 -->
		#{isdefault},<!-- 是否默认(0:非默认 1:默认) -->
		#{cuser},<!-- 创建用户id -->
		#{cdate},<!-- 创建时间 -->
		#{uuser},<!-- 修改用户id -->
		#{udate},<!-- 修改时间 -->
		#{isdisable},<!-- 是否启用(0:已禁用 1:启用) -->
		#{remark},<!-- 备注 -->
		#{id} <!-- id -->
    </sql>


    <!-- 字段名称  '_hide' 表示前端列表隐藏 自动创建，禁止修改-->
    <sql id="Column">
        '公司ID-组织架构'  companyId,
        'bom编码'  code,
        'bom名称'  name,
        '是否默认(0:非默认 1:默认)'  isdefault,
        '创建用户id'  cuser,
        '创建时间'  cdate,
        '修改用户id'  uuser,
        '修改时间'  udate,
        '是否启用(0:已禁用 1:启用)'  isdisable,
        '备注'  remark,
        'id' id_hide
    </sql>

    <!-- 自动创建，禁止修改 -->
    <select id="findColumnList"  resultType="java.util.LinkedHashMap">
        select
        <include refid="Column"></include>
        from dual
    </select>

    <!-- 自动创建，禁止修改 -->
    <select id="findDataList"  parameterType="com.yvan.PageData"  resultType="java.util.Map">
        select
        <include refid="Field"></include>
        from
        <include refid="tableName"></include>
        <where>
            <!--queryStr 自定义sql查询语句-->
            <if test="queryStr != null and queryStr!=''" >
                and ${queryStr}
            </if>
        </where>
        <if test="orderStr != null and orderStr != ''" >
            order by ${orderStr}
        </if>
    </select>

    <!-- 列表 自动创建，禁止修改-->
    <select id="dataListPage" parameterType="com.yvan.PageData" resultType="com.xy.vmes.entity.Bom">
        select
        <include refid="Field"></include>
        from
        <include refid="tableName"></include>
        <where>
            <!--queryStr 自定义sql查询语句-->
            <if test="queryStr != null and queryStr!=''" >
                and ${queryStr}
            </if>
        </where>
    </select>


    <!-- 批量删除 自动创建，禁止修改-->
    <delete id="deleteByIds" parameterType="java.lang.String">
        delete from
        <include refid="tableName"></include>
        where
        id in
        <foreach item="item" index="index" collection="array" open="(" separator="," close=")">
		#{item}
        </foreach>
    </delete>


    <!-- 自动创建，禁止修改-->
    <update id="updateToDisableByIds" parameterType="java.lang.String" >
        update
        <include refid="tableName"></include>
        set isdisable = '0' ,udate = now()
        where
        id in
        <foreach item="item" index="index" collection="array" open="(" separator="," close=")">
        #{item}
        </foreach>
    </update>



    <!-- ***************************************************以上为自动生成代码禁止修改，请在下面添加业务代码************************************************* -->
    <insert id="insertColumn" >
        delete from vmes_column where model_code = 'Bom' ;
        insert into vmes_column (
        id,model_code,title_key,title_name,serial_number,
        isdisable,ishide,isedit,ismust,cdate,
        cuser
        ) VALUES
            (replace(uuid(), '-', ''),'Bom','prodId','货品id',1, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'Bom','prodCode','货品编码',2, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'Bom','prodName','货品名称',3, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'Bom','prodSpec','规格型号',4, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'Bom','genreName','货品属性',5, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'Bom','genreId','货品属性id',6, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'Bom','unitName','计量单位',7, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'Bom','unitId','计量单位id',8, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'Bom','typeName','货品类型',9, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'Bom','typeId','货品类型id',10, '1','0','1','0',now(), 'admin'),

            (replace(uuid(), '-', ''),'Bom','companyId','公司ID-组织架构',12, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'Bom','code','BOM编码',13, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'Bom','name','BOM名称',14, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'Bom','isdefault','是否默认',15, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'Bom','cuser','创建用户id',16, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'Bom','cdate','创建时间',17, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'Bom','uuser','修改用户id',18, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'Bom','udate','修改时间',19, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'Bom','isdisable','是否启用',20, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'Bom','remark','备注',21, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'Bom','id','id',0, '1','0','1','0',now(), 'admin')



            delete from vmes_column where model_code = 'BomProduct' ;
            insert into vmes_column (
            id,model_code,title_key,title_name,serial_number,
            isdisable,ishide,isedit,ismust,cdate,
            cuser
            ) VALUES
                (replace(uuid(), '-', ''),'BomProduct','prodId','货品id',1, '1','0','1','0',now(), 'admin'),
                (replace(uuid(), '-', ''),'BomProduct','prodCode','货品编码',2, '1','1','1','0',now(), 'admin'),
                (replace(uuid(), '-', ''),'BomProduct','prodName','货品名称',3, '1','1','1','0',now(), 'admin'),
                (replace(uuid(), '-', ''),'BomProduct','prodSpec','规格型号',4, '1','1','1','0',now(), 'admin'),
                (replace(uuid(), '-', ''),'BomProduct','genreName','货品属性',5, '1','0','1','0',now(), 'admin'),
                (replace(uuid(), '-', ''),'BomProduct','genreId','货品属性id',6, '1','0','1','0',now(), 'admin'),
                (replace(uuid(), '-', ''),'BomProduct','unitName','计量单位',7, '1','1','1','0',now(), 'admin'),
                (replace(uuid(), '-', ''),'BomProduct','unitId','计量单位id',8, '1','0','1','0',now(), 'admin'),
                (replace(uuid(), '-', ''),'BomProduct','typeName','货品类型',9, '1','1','1','0',now(), 'admin'),
                (replace(uuid(), '-', ''),'BomProduct','typeId','货品类型id',10, '1','0','1','0',now(), 'admin'),

                (replace(uuid(), '-', ''),'BomProduct','companyId','公司ID-组织架构',12, '1','0','1','0',now(), 'admin'),
                (replace(uuid(), '-', ''),'BomProduct','code','BOM编码',13, '1','1','1','0',now(), 'admin'),
                (replace(uuid(), '-', ''),'BomProduct','name','BOM名称',14, '1','1','1','0',now(), 'admin'),
                (replace(uuid(), '-', ''),'BomProduct','isdefault','是否默认',15, '1','0','1','0',now(), 'admin'),
                (replace(uuid(), '-', ''),'BomProduct','cuser','创建用户id',16, '1','0','1','0',now(), 'admin'),
                (replace(uuid(), '-', ''),'BomProduct','cdate','创建时间',17, '1','0','1','0',now(), 'admin'),
                (replace(uuid(), '-', ''),'BomProduct','uuser','修改用户id',18, '1','0','1','0',now(), 'admin'),
                (replace(uuid(), '-', ''),'BomProduct','udate','修改时间',19, '1','0','1','0',now(), 'admin'),
                (replace(uuid(), '-', ''),'BomProduct','isdisable','是否启用',20, '1','0','1','0',now(), 'admin'),
                (replace(uuid(), '-', ''),'BomProduct','remark','备注',21, '1','0','1','0',now(), 'admin'),
                (replace(uuid(), '-', ''),'BomProduct','planCount','计划数量',22, '1','0','1','0',now(), 'admin'),
                (replace(uuid(), '-', ''),'BomProduct','lackCount','缺料数量',23, '1','0','1','0',now(), 'admin'),
                (replace(uuid(), '-', ''),'BomProduct','id','id',0, '1','0','1','0',now(), 'admin'),

                (replace(uuid(), '-', ''),'BomProduct','isExistBom','isExistBom',24, '1','0','1','0',now(), 'admin'),

            delete from vmes_column where model_code = 'BomList' ;
            insert into vmes_column (
            id,model_code,title_key,title_name,serial_number,
            isdisable,ishide,isedit,ismust,cdate,
            cuser
            ) VALUES
                (replace(uuid(), '-', ''),'BomList','prodId','货品id',1, '1','0','1','0',now(), 'admin'),
                (replace(uuid(), '-', ''),'BomList','companyId','公司ID-组织架构',12, '1','0','1','0',now(), 'admin'),
                (replace(uuid(), '-', ''),'BomList','code','BOM编码',13, '1','1','1','0',now(), 'admin'),
                (replace(uuid(), '-', ''),'BomList','name','BOM名称',14, '1','1','1','0',now(), 'admin'),
                (replace(uuid(), '-', ''),'BomList','isdefault','是否默认',15, '1','1','1','0',now(), 'admin'),
                (replace(uuid(), '-', ''),'BomList','cuser','创建用户id',16, '1','0','1','0',now(), 'admin'),
                (replace(uuid(), '-', ''),'BomList','cdate','创建时间',17, '1','0','1','0',now(), 'admin'),
                (replace(uuid(), '-', ''),'BomList','uuser','修改用户id',18, '1','0','1','0',now(), 'admin'),
                (replace(uuid(), '-', ''),'BomList','udate','修改时间',19, '1','0','1','0',now(), 'admin'),
                (replace(uuid(), '-', ''),'BomList','isdisable','是否启用',20, '1','0','1','0',now(), 'admin'),
                (replace(uuid(), '-', ''),'BomList','remark','备注',21, '1','1','1','0',now(), 'admin'),
                (replace(uuid(), '-', ''),'BomList','id','id',0, '1','0','1','0',now(), 'admin')
    </insert>



    <!-- 列表(全部) 自动创建，禁止修改-->
    <select id="dataList" parameterType="com.yvan.PageData" resultType="com.xy.vmes.entity.Bom">
        select
        <include refid="Field"></include>
        from
        <include refid="tableName"></include>
        <choose>
            <!--
                mapSize (0 or is null) 无查询参数-业务层传入
                isQueryAll 是否查询全部
                fasle: (false or is null) 无查询条件-查询结果集返回空或list.size()==0
                true : 无查询条件-返回全部业务表数据
            -->
            <when test="(mapSize == null || mapSize == 0) and 'true' != isQueryAll ">
                where 1=2
            </when>
            <otherwise>
                <where>
                    <!--isSelfExist 是否考虑自己在业务表中是否存在
                        false: (false or is null) 无需考虑自己在业务表中是否存在
                        true : 需要考虑自己在业务表中是否存在
                    -->
                    <if test="id != null and id != ''" >
                        <choose>
                            <when test="'true' == isSelfExist">
                                <![CDATA[ and id <> #{id} ]]>
                            </when>
                            <otherwise>
                                and id = #{id}
                            </otherwise>
                        </choose>
                    </if>
                    <if test="companyId != null and companyId != ''" >
                        and company_id = #{companyId}
                    </if>
                    <if test="name != null and name != ''" >
                        and name = #{name}
                    </if>
                    <if test="isdisable != null and isdisable != ''" >
                        and isdisable = #{isdisable}
                    </if>
                    <if test="isdefault != null and isdefault != ''" >
                        and isdefault = #{isdefault}
                    </if>

                    <!--queryStr 自定义sql查询语句-->
                    <if test="queryStr != null and queryStr != ''" >
                        and ${queryStr}
                    </if>
                </where>
            </otherwise>
        </choose>
        <if test="orderStr != null and orderStr != ''" >
            order by ${orderStr}
        </if>
    </select>




    <!-- 字段 自动创建，可以修改-->
    <sql id="Field1">
        bom.company_id companyId,<!-- 公司ID-组织架构 -->
        bom.code code,<!-- bom编码 -->
        bom.name name,<!-- bom名称 -->
        bom.isdefault isdefault,<!-- 是否默认(0:非默认 1:默认) -->
        bom.cuser cuser,<!-- 创建用户id -->
        bom.cdate cdate,<!-- 创建时间 -->
        bom.uuser uuser,<!-- 修改用户id -->
        bom.udate udate,<!-- 修改时间 -->
        bom.isdisable isdisable,<!-- 是否启用(0:已禁用 1:启用) -->
        bom.remark remark,<!-- 备注 -->

        bom.id bomId,
        prod.id prodId,
        prod.code prodCode,
        prod.name prodName,
        prod.spec prodSpec,
        genre.name genreName,
        genre.id genreId,
        unit.name unitName,
        unit.id unitId,
        type.name typeName,
        type.id typeId,



        bom.id id <!-- id -->
    </sql>

    <!-- 字段值 自动创建，可以修改-->
    <!--
    <sql id="Column1">
            'vmes_bom_tree id'  bomTreeId,
            '公司ID-组织架构'  companyId,
            'bom编码'  code,
            'bom名称'  name,
            '是否默认(0:非默认 1:默认)'  isdefault,
            '创建用户id'  cuser,
            '创建时间'  cdate,
            '修改用户id'  uuser,
            '修改时间'  udate,
            '是否启用(0:已禁用 1:启用)'  isdisable,
            '备注'  remark,
            'id' id_hide
    </sql>
     -->

    <!-- 自动创建，可以修改 -->
    <!--
    <select id="getColumnList"  resultType="java.util.LinkedHashMap">
        select
        <include refid="Column1"></include>
        from dual
    </select>
    -->

    <!-- 自动创建，可以修改 -->
    <select id="getDataList"  parameterType="com.yvan.PageData"  resultType="java.util.Map">
        select
        <include refid="Field1"></include>
        from
         vmes_product prod
        left join (
        select t1.*,t0.prod_id,t0.layer from vmes_bom_tree t0 left join vmes_bom t1 on  t1.id = t0.bom_id
        <where>
            <if test="isdefault != null and isdefault != ''">
                and t1.isdefault = #{isdefault}
            </if>
        </where>
        ) bom on prod.id = bom.prod_id and bom.layer = 0
        left join vmes_product_unit produnit on produnit.product_id = prod.id and produnit.type = 1
        left join vmes_dictionary genre on prod.genre = genre.id
        left join vmes_dictionary unit on produnit.unit = unit.id
        left join vmes_dictionary type on prod.type = type.id
        <where>
            <!--queryStr 自定义sql查询语句-->
            <if test="queryStr != null and queryStr != ''" >
                and ${queryStr}
            </if>
            <if test="code != null and code != ''">
                and bom.code LIKE CONCAT(CONCAT('%', #{code}),'%')
            </if>
            <if test="name != null and name != ''">
                and bom.name LIKE CONCAT(CONCAT('%', #{name}),'%')
            </if>
            <if test="isdisable != null and isdisable != ''">
                and bom.isdisable = #{isdisable}
            </if>
            <if test="prodId != null and prodId != ''">
                and prod.id  = #{prodId}
            </if>
            <if test="genreId != null and genreId != ''">
                and genre.id  = #{genreId}
            </if>
            <if test="genreName != null and genreName != ''">
                and genre.name  = #{genreName}
            </if>
            <if test="prodName != null and prodName != ''">
                and prod.name LIKE CONCAT(CONCAT('%', #{prodName}),'%')
            </if>
            <if test="prodCode != null and prodCode != ''">
                and prod.code LIKE CONCAT(CONCAT('%', #{prodCode}),'%')
            </if>
            <if test="prodSpec != null and prodSpec != ''">
                and prod.spec LIKE CONCAT(CONCAT('%', #{prodSpec}),'%')
            </if>
            <if test="unitName != null and unitName != ''">
                and unit.name LIKE CONCAT(CONCAT('%', #{unitName}),'%')
            </if>
            <if test="currentCompanyId != null and currentCompanyId != ''" >
                and prod.company_id=#{currentCompanyId}
            </if>
        </where>
        <if test="orderStr != null and orderStr != ''" >
            order by ${orderStr}
        </if>
    </select>

    <!-- 自动创建，可以修改 -->
    <select id="getDataListPage"  parameterType="com.yvan.PageData"  resultType="java.util.Map">
        select
        bom.id id, <!-- id -->
        bom.company_id companyId,<!-- 公司ID-组织架构 -->
        bom.code code,<!-- bom编码 -->
        bom.name name,<!-- bom名称 -->
        bom.isdefault isdefault,<!-- 是否默认(0:非默认 1:默认) -->
        bom.cuser cuser,<!-- 创建用户id -->
        bom.cdate cdate,<!-- 创建时间 -->
        bom.uuser uuser,<!-- 修改用户id -->
        bom.udate udate,<!-- 修改时间 -->
        bom.isdisable isdisable,<!-- 是否启用(0:已禁用 1:启用) -->
        bom.remark remark,<!-- 备注 -->
        bom.id bomId,
        CASE
            WHEN bom.id is not null THEN 'Y'
            WHEN bom.id is null THEN 'N'
        ELSE null
        END isExistBom,

        prod.id prodId,

        prod.code sysProductCode,
        prod.source_code custProductCode,
        CASE
          WHEN prod.source_code is null THEN prod.code
          WHEN prod.source_code is not null THEN prod.source_code
        ELSE null
        END prodCode,
        prod.name prodName,
        prod.spec prodSpec,
        genre.name genreName,
        genre.id genreId,
        unit.name unitName,
        unit.id unitId,
        type.name typeName,
        type.id typeId
        from
        vmes_product prod
        left join (
          select t1.*,t0.prod_id,t0.layer from vmes_bom_tree t0 left join vmes_bom t1 on  t1.id = t0.bom_id
        <where>
            <if test="isdefault != null and isdefault != ''">
                and t1.isdefault = #{isdefault}
            </if>
        </where>
        ) bom on prod.id = bom.prod_id and bom.layer = 0
        left join vmes_product_unit produnit on produnit.product_id = prod.id and produnit.type = 1
        left join vmes_dictionary genre on prod.genre = genre.id
        left join vmes_dictionary unit on produnit.unit = unit.id
        left join vmes_dictionary type on prod.type = type.id


        left join vmes_user cuser on prod.cuser = cuser.id
        left join vmes_department dept on dept.id = cuser.dept_id
        <where>

            <if test='dataType != null and dataType == "0"'>
                and cuser.id = #{currentUserId}
            </if>
            <if test='dataType != null and dataType == "1"'>
                and dept.id_${deptLayer} = #{deptRId}
            </if>


            <!--queryStr 自定义sql查询语句-->
            <if test="queryStr != null and queryStr != ''" >
                and ${queryStr}
            </if>
            <if test="bomIds != null and bomIds != ''">
                and bom.id in (${bomIds})
            </if>

            <if test="notBomIds != null and notBomIds != ''">
                and bom.id not in (${notBomIds})
            </if>

            <if test="code != null and code != ''">
                and bom.code LIKE CONCAT(CONCAT('%', #{code}),'%')
            </if>
            <if test="name != null and name != ''">
                and bom.name LIKE CONCAT(CONCAT('%', #{name}),'%')
            </if>
            <if test="isdisable != null and isdisable != ''">
                and bom.isdisable = #{isdisable}
            </if>
            <if test="prodId != null and prodId != ''">
                and prod.id  = #{prodId}
            </if>
            <if test="genreId != null and genreId != ''">
                and genre.id  = #{genreId}
            </if>
            <if test="genreName != null and genreName != ''">
                and genre.name  = #{genreName}
            </if>
            <if test="isHavingBom == 1">
                and bom.id is not null
            </if>

            <if test="prodName != null and prodName != ''">
                and prod.name LIKE CONCAT(CONCAT('%', #{prodName}),'%')
            </if>
            <if test="prodCode != null and prodCode != ''">
                and prod.code LIKE CONCAT(CONCAT('%', #{prodCode}),'%')
            </if>
            <if test="prodSpec != null and prodSpec != ''">
                and prod.spec LIKE CONCAT(CONCAT('%', #{prodSpec}),'%')
            </if>
            <if test="prodTypeName != null and prodTypeName != ''">
                and type.name LIKE CONCAT('%',CONCAT(#{prodTypeName}),'%')
            </if>

            <!--过滤出 货品属性(备件)-->
            <if test="'true' == isNeedGenreSpare">
                and prod.genre = '384cfd1329e648618b5a237ce1038bab'
            </if>
            <!--过滤出 货品属性(非备件)-->
            <if test="'true' == isNeedNotInGenreSpare">
                <![CDATA[ and prod.genre <> '384cfd1329e648618b5a237ce1038bab' ]]>
            </if>
            <if test="unitName != null and unitName != ''">
                and unit.name LIKE CONCAT(CONCAT('%', #{unitName}),'%')
            </if>
            <if test="currentCompanyId != null and currentCompanyId != ''" >
                and prod.company_id=#{currentCompanyId}
            </if>
        </where>
        <if test="orderStr != null and orderStr != ''" >
            order by ${orderStr}
        </if>
    </select>

    <!-- 自动创建，禁止修改-->
    <update id="updateToNotDefaultByPorId" parameterType="java.lang.String" >
        update
        <include refid="tableName"></include>
        set isdefault = '0' ,udate = now()
        where
        id in (select bom_id from vmes_bom_tree where prod_id = #{prodId})
    </update>


</mapper>